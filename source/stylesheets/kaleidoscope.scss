
$default-prefixes: webkit moz ms o;

@mixin prefix-values($property, $value, $prefixes: $default-prefixes) {
    @each $prefix in $prefixes {
        -#{$prefix}-#{$property}: #{$value};
    }
    #{$property}: #{$value};
}

@mixin transform-origin ($x: left, $y: top) {
    $values: #{$x} #{$y};
    @include prefix-values('transform-origin', $values);
}

@mixin transform-rotate ($degrees) {
    $value: rotate($degrees);
    @include prefix-values('transform', $value);
}

@mixin transform-mirror-rotate ($degrees) {
    $values: scale(-1, 1) rotate($degrees);
    @include prefix-values('transform', $values);
}

.contain-k {
  overflow: hidden;
  position: relative;
  height: 800px;
}

.kaleidoscope {
  width: 100%;
  height: 100%;

  .tile {
    display: none;
    position: absolute;
    top: 50%;
    left: 0;
    z-index: 0;
    overflow: hidden;
    height: 100%;
    width: 50%;
    @include transform-origin(right, top);

  .image {
      position: relative;
      top: 0;
      left: 100%;
      height: 100%;
      width: 100%;
      background-image: url(../images/contact-bg.png); // Apologies to Damien Hirst.
      @include transform-origin();
   }
    }

    $max_segments: 32;
    $segments: 0;

    @while $segments <= $max_segments {
  $step: 360deg / ($segments * 2);

  $angle: 0 - $step;
  $i: 0;

  &.n#{$segments} {

      .tile {
          display: block;

    @while $i < $segments * 2 {
        &.t#{$i} {
      @include transform-rotate($angle + $step);
        }

        &.t#{$i+1} {
      @include transform-mirror-rotate($angle + $step);
        }

        $angle: $angle + ($step * 2);
        $i: $i + 2;
    }
    .image {
        @include transform-rotate($step);
    }
      }
  }
  $segments: $segments + 1;
    }

}
